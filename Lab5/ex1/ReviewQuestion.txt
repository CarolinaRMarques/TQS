Review questions:
a)Identify a couple of examples on the use of AssertJ expressive methods chaining.
assertThat(found).extracting(Employee::getName).containsOnly("bob");
assertThat(found.getName()).isEqualTo(alex.getName());
assertThat(fromDb.getName()).isEqualTo(emp.getName());
assertThat(allEmployees).hasSize(3).extracting(Employee::getName).containsOnly(alex.getName(), ron.getName(), bob.getName());

b)Identify an example in which you mock the behaviour of the repository (and avoid involvind adatabase). 
Mockito.when(employeeRepository.findByName(john.getName())).thenReturn(john);
Mockito.when(employeeRepository.findByName(alex.getName())).thenReturn(alex);
Mockito.when(employeeRepository.findByName("wrong_name")).thenReturn(null);      Mockito.when(employeeRepository.findById(john.getId())).thenReturn(Optional.of(john));
Mockito.when(employeeRepository.findAll()).thenReturn(allEmployees);
Mockito.when(employeeRepository.findById(-99L)).thenReturn(Optional.empty());

c)What is the difference between standard @Mock and @MockBean?
We can use the @MockBean to add mock objects to the Spring application context. The mock will replace any existing bean of the same type in the application context. ... When we use the annotation on a field, as well as being registered in the application context, the mock will also be injected into the field.
------------OR-----------
As you write a test that doesn't need any dependencies from the Spring Boot container, the classic/plain Mockito is the way to follow : it is fast and favors the isolation of the tested component.
If your test needs to rely on the Spring Boot container and you want also to add or mock one of the container beans : @MockBean from Spring Boot is the way.

d)What is the role of the file “application-integrationtest.properties”? In which conditions will it be used?
Supostamente serve para a gente dar override das definições por default
quando queremos que corra numas condições definições definidas pro nos : inclui username, url , password
